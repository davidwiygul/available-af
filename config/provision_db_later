# provision_db_later
# provision_db_later PUBLIC_IP
# provisions standby postgres server,
#     completes configuration of master for synchronous replication,
#     installs failover system on master and standby,
#     obtains floating (private) ip for db access,
#     and records it in provision.config
# typically run immediately after provision_db_first
# requires same variables from provision.config as provision_db_first
#     in addition to DB_IP, DB_PUBLIC, and NETPLAN_YAML
# unlike queue nodes, (multi)schedulers, and workers, database nodes
#     in the current setup are limited to two in number,
#     one master and one standby,
#     so provision_db_later should be run only once (or not at all)

#!/bin/bash

source provision.config

# configure postgres on master to synchronize to standby
PRIVATE_IP=$(ssh -i $AWS_SSH_KEY ubuntu@$1 "hostname -I" | tr -d '[:space:]')

ssh -T -i $AWS_SSH_KEY ubuntu@$DB_PUBLIC << HERE
    sudo -u postgres PGPASSWORD=$DB_PWD psql -h localhost -d $DATABASE -U $DB_USER -c 'create table db_failover_flag(flag boolean); insert into db_failover_flag (flag) values (FALSE);'

    HBA=\$(sudo -u postgres psql -A -t -c "show hba_file;")
    PGCONF=\$(sudo -u postgres psql -A -t -c "show config_file;")

    sudo -u postgres sed -i '/# IPv4 local connections:/a host\treplication\t$REP_USER\t$PRIVATE_IP/32\t\tmd5' \$HBA

    sudo systemctl reload postgresql

    declare -A dict=(
        [synchronous_commit]=on
        [synchronous_standby_names]="'$DB_STANDBY_NAME'"
        )
    
    for key in \${!dict[@]}; do
        value=\${dict[\$key]}
        sudo -u postgres sed -i "s|#\(\$key\).*|\1 = \$value|" \$PGCONF
    done

    sudo systemctl restart postgresql

    exit
HERE


# set up EFS on standby
./efs $1

# configure postgres on standby
ssh -T -i $AWS_SSH_KEY ubuntu@$1 << HERE
    sudo apt-get update
    
    sudo apt-get install -y postgresql

    DATA=\$(sudo -u postgres psql -A -t -c "show data_directory;")
    HBA=\$(sudo -u postgres psql -A -t -c "show hba_file;")
    PGCONF=\$(sudo -u postgres psql -A -t -c "show config_file;")
    
    sudo systemctl stop postgresql

    sudo -u postgres mv \$DATA \$DATA.bk

    sudo -u postgres PGPASSWORD=$REP_PWD pg_basebackup -h $DB_IP -U $REP_USER -p 5432 -D \$DATA/ -P -Xs -R

    sudo -u postgres sed -i "\\\$arestore_command = 'cp $DB_ARCHIVE/%f %p'" \$DATA/recovery.conf

    sudo -u postgres sed -i "\\\$aarchive_cleanup_command = 'pg_archivecleanup $DB_ARCHIVE %r'" \$DATA/recovery.conf

    sudo -u postgres sed -i "s|\(primary_conninfo = '\)\(.*\)|\1application_name=$DB_STANDBY_NAME \2|" \$DATA/recovery.conf

    sudo sed -i '/# IPv4 local connections:/a host\t$DATABASE\t$DB_USER\t\tall\t\t\tmd5' \$HBA

    declare -A dict=(
        [listen_addresses]="'*'"
        [hot_standby]=on
        [hot_standby_feedback]=on
        )

    for key in \${!dict[@]}; do
        value=\${dict[\$key]}
        sudo -u postgres sed -i "s|#\(\$key\).*|\1 = \$value|" \$PGCONF
    done

    sudo systemctl start postgresql

    exit
HERE

# install aws cli on standby and assign a secondary private ip to master
MASTER_REGION=$(./get_region $DB_PUBLIC)
MASTER_ENI=$(./get_eni $DB_PUBLIC)
ssh -i $AWS_SSH_KEY ubuntu@$1 << HERE
    sudo apt-get install -y awscli
    aws ec2 --region $MASTER_REGION assign-private-ip-addresses --network-interface-id $MASTER_ENI --secondary-private-ip-address-count 1
    exit
HERE

sleep 10

# record floating IP assigned to master
sed -i "s|^DB_IP.*|DB_IP='$(./get_floating_ip $DB_PUBLIC)'|" provision.config

# configure master to accept floating IP
./netplan $DB_PUBLIC
ssh -i $AWS_SSH_KEY ubuntu@$DB_PUBLIC << HERE
    sudo mv /home/ubuntu/$NETPLAN_YAML /etc/netplan/$NETPLAN_YAML
    sudo netplan apply
    exit
HERE

# prepare standby to accept floating IP if called to
./netplan $1

# install failover system on master
./db_failover $DB_PUBLIC master $PRIVATE_IP

# install failover system on standby
./db_failover $1 standby $(./get_primary_ip $DB_PUBLIC)
